;;; index-prep.ss
;;; Copyright (c) 1998 Cadence Research Systems

;;; authors: R. Kent Dybvig and Oscar Waddell

(eval-when (compile eval) (case-sensitive #t))

(let ()
(include "dsm.ss")
(let ()
(include "preplib.ss")

(define-syntactic-monad P
  ip                   ; current input port
  op                   ; current output port
)
 
(define copy-through-newline
  (lambda (ip op)
    (state-case (c (read-char ip))
      [(#\newline) (write-char c op)]
      [(eof) (void)]
      [else (write-char c op) (copy-through-newline ip op)])))

(define s0
  (P lambda ()
    (state-case (c (read-char ip))
      [(#\\)
       (let ((cmd (read-command ip)))
         (cond
           [(get-def cmd '()) =>
            (lambda (proc)
              (suppress-white-space ip)
              (P proc))]
           [else (fprintf op "\\~a" cmd) (P s0)]))]
      [(#\%)
       (write-char #\% op)
       (copy-through-newline ip op)
       (P s0)]
      [(eof) (close-input-port ip)]
      [else (write-char c op) (P s0)])))

;;; global constants
(define genlab-prefix "i")  ; unique string for this processor

;;; global variables
(define current-ifile) ; for the benefit of genlab & input-error
(define genlab-counters)

(set! go
  (lambda (fn)
    (let* ((ip (open-input-file (format "~a.itex" fn)))
           (op (open-output-file (format "~a.tex" fn) 'truncate)))
      (fprintf op "%%% DO NOT EDIT THIS FILE~%")
      (fprintf op "%%% Edit the .stex version instead~%~%")
      (fluid-let ((current-ifile ip) (genlab-counters '()))
        (P s0 ([ip ip] [op op]))
        (close-output-port op)))))

(global-def index
  (P lambda ()
    (let ((lab (genlab)))
      (fprintf op "\\label{~a}\\hindex{~a}" lab lab))
    (P s0)))
))
